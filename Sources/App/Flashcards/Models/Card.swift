import Fluent
import Vapor


/// Represent the individual visual cards that a user sees. These are generated by a specific card type and
/// added to the target deck.
final class Card: Model, Content {

    static let schema = "flashcard_cards"

    @ID(key: .id)
    var id: UUID?

    @Parent(key: "deck_id")
    var deck: Deck

    @Parent(key: "note_id")
    var note: Note

    @Parent(key: "card_type_id")
    var cardType: CardType

    init() { }

    init(id: UUID? = nil, deckID: UUID, noteID: UUID, cardTypeID: UUID) {
        self.id = id
        self.$deck.id = deckID
        self.$note.id = noteID
        self.$cardType.id = cardTypeID
    }

}

extension Card {

    struct Migration: Fluent.Migration {
        var name: String { "CreateFlashcardCard" }

        func prepare(on database: Database) -> EventLoopFuture<Void> {
            database.schema(schema)
                .id()
                .field("deck_id", .uuid, .required, .references("flashcard_decks", "id"))
                .field("note_id", .uuid, .required, .references("flashcard_notes", "id"))
                .field("card_type_id", .uuid, .required, .references("flashcard_card_types", "id"))
                .create()
        }

        func revert(on database: Database) -> EventLoopFuture<Void> {
            database.schema(schema).delete()
        }
    }

}
