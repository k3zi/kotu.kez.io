@import "~bootstrap/scss/bootstrap";
@import "./katex.min.css";
@import "./bi/bootstrap-icons.css";

p {
    margin-bottom: 0;
}

.embed-responsive {
    @extend .ratio !optional;
}

.embed-responsive-16by9 {
    @extend .ratio-16x9 !optional;
}

.ratio iframe {
    width: 100%;
    height: 100%;
}

@each $state, $value in $colors {
    .caret-#{$state} {
        caret-color: $value;
    }
    .border-focus-#{$state}:focus {
        border-color: $value;
    }
    .border-#{$state} {
        border-color: $value;
    }
    .text-#{$state} {
        color: $value;
    }
    .fake-caret-#{$state}::after {
        animation: blink-#{$state} 1s linear infinite;
    }

    @keyframes blink-#{$state} {
        0% {
            opacity: 0
        }
        100% {
            color: $value;
            opacity: 1
        }
    }
}

@function tint-color($color, $weight) {
  @return mix(white, $color, $weight);
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
  @return mix(black, $color, $weight);
}

$blue-100: tint-color($blue, 80%) !default;
$blue-200: tint-color($blue, 60%) !default;
$blue-300: tint-color($blue, 40%) !default;
$blue-400: tint-color($blue, 20%) !default;
$blue-500: $blue !default;
$blue-600: shade-color($blue, 20%) !default;
$blue-700: shade-color($blue, 40%) !default;
$blue-800: shade-color($blue, 60%) !default;
$blue-900: shade-color($blue, 80%) !default;

$indigo-100: tint-color($indigo, 80%) !default;
$indigo-200: tint-color($indigo, 60%) !default;
$indigo-300: tint-color($indigo, 40%) !default;
$indigo-400: tint-color($indigo, 20%) !default;
$indigo-500: $indigo !default;
$indigo-600: shade-color($indigo, 20%) !default;
$indigo-700: shade-color($indigo, 40%) !default;
$indigo-800: shade-color($indigo, 60%) !default;
$indigo-900: shade-color($indigo, 80%) !default;

$purple-100: tint-color($purple, 80%) !default;
$purple-200: tint-color($purple, 60%) !default;
$purple-300: tint-color($purple, 40%) !default;
$purple-400: tint-color($purple, 20%) !default;
$purple-500: $purple !default;
$purple-600: shade-color($purple, 20%) !default;
$purple-700: shade-color($purple, 40%) !default;
$purple-800: shade-color($purple, 60%) !default;
$purple-900: shade-color($purple, 80%) !default;

$pink-100: tint-color($pink, 80%) !default;
$pink-200: tint-color($pink, 60%) !default;
$pink-300: tint-color($pink, 40%) !default;
$pink-400: tint-color($pink, 20%) !default;
$pink-500: $pink !default;
$pink-600: shade-color($pink, 20%) !default;
$pink-700: shade-color($pink, 40%) !default;
$pink-800: shade-color($pink, 60%) !default;
$pink-900: shade-color($pink, 80%) !default;

$red-100: tint-color($red, 80%) !default;
$red-200: tint-color($red, 60%) !default;
$red-300: tint-color($red, 40%) !default;
$red-400: tint-color($red, 20%) !default;
$red-500: $red !default;
$red-600: shade-color($red, 20%) !default;
$red-700: shade-color($red, 40%) !default;
$red-800: shade-color($red, 60%) !default;
$red-900: shade-color($red, 80%) !default;

$orange-100: tint-color($orange, 80%) !default;
$orange-200: tint-color($orange, 60%) !default;
$orange-300: tint-color($orange, 40%) !default;
$orange-400: tint-color($orange, 20%) !default;
$orange-500: $orange !default;
$orange-600: shade-color($orange, 20%) !default;
$orange-700: shade-color($orange, 40%) !default;
$orange-800: shade-color($orange, 60%) !default;
$orange-900: shade-color($orange, 80%) !default;

$yellow-100: tint-color($yellow, 80%) !default;
$yellow-200: tint-color($yellow, 60%) !default;
$yellow-300: tint-color($yellow, 40%) !default;
$yellow-400: tint-color($yellow, 20%) !default;
$yellow-500: $yellow !default;
$yellow-600: shade-color($yellow, 20%) !default;
$yellow-700: shade-color($yellow, 40%) !default;
$yellow-800: shade-color($yellow, 60%) !default;
$yellow-900: shade-color($yellow, 80%) !default;

$green-100: tint-color($green, 80%) !default;
$green-200: tint-color($green, 60%) !default;
$green-300: tint-color($green, 40%) !default;
$green-400: tint-color($green, 20%) !default;
$green-500: $green !default;
$green-600: shade-color($green, 20%) !default;
$green-700: shade-color($green, 40%) !default;
$green-800: shade-color($green, 60%) !default;
$green-900: shade-color($green, 80%) !default;

$teal-100: tint-color($teal, 80%) !default;
$teal-200: tint-color($teal, 60%) !default;
$teal-300: tint-color($teal, 40%) !default;
$teal-400: tint-color($teal, 20%) !default;
$teal-500: $teal !default;
$teal-600: shade-color($teal, 20%) !default;
$teal-700: shade-color($teal, 40%) !default;
$teal-800: shade-color($teal, 60%) !default;
$teal-900: shade-color($teal, 80%) !default;

$cyan-100: tint-color($cyan, 80%) !default;
$cyan-200: tint-color($cyan, 60%) !default;
$cyan-300: tint-color($cyan, 40%) !default;
$cyan-400: tint-color($cyan, 20%) !default;
$cyan-500: $cyan !default;
$cyan-600: shade-color($cyan, 20%) !default;
$cyan-700: shade-color($cyan, 40%) !default;
$cyan-800: shade-color($cyan, 60%) !default;
$cyan-900: shade-color($cyan, 80%) !default;

mark-blue {
    padding: .2em;
    background-color: $blue-100;
}
mark-indigo {
    padding: .2em;
    background-color: $indigo-100;
}
mark-indigo {
    padding: .2em;
    background-color: $indigo-100;
}
mark-purple {
    padding: .2em;
    background-color: $purple-100;
}
mark-pink {
    padding: .2em;
    background-color: $pink-100;
}
mark-red {
    padding: .2em;
    background-color: $red-100;
}
mark-orange {
    padding: .2em;
    background-color: $orange-100;
}
mark-yellow {
    padding: .2em;
    background-color: $yellow-100;
}
mark-green {
    padding: .2em;
    background-color: $green-100;
}
mark-teal {
    padding: .2em;
    background-color: $teal-100;
}
mark-cyan {
    padding: .2em;
    background-color: $cyan-100;
}
mark-gray {
    padding: .2em;
    background-color: $gray-100;
}

.bg-gray-100 {
    background-color: $gray-100;
}

.bg-gray-200 {
    background-color: $gray-200;
}

.bg-gray-300 {
    background-color: $gray-300;
}

@each $state, $value in $theme-colors {
    .bg-#{$state}-inverted {
        color: $value;
        border: $value 1px solid;
    }
}

body {
    background-color: #444;
    padding-bottom: 27px;
}

body.fit-content {
    padding: 0;
    height: 100vh;

    #app {
        display: flex;
        flex-flow: column;
        height: 100%;

        .navbar {
            flex: none;
        }
    }

    #app-container {
        @extend .d-flex;
        overflow-y: auto;
    }
}

.p-padding-bottom {
    p {
        margin-bottom: 1rem;
    }
}

.navbar-brand {
    font-weight: bold;
    background-color: #fff;
    padding: 1px 7px;
    border-radius: 11px;
    color: #000 !important
}

.container {
    border-radius: 0;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    background-color: #fff;
    padding-top: 30px;
    padding-bottom: 30px;
}

.bg-dark {
    background-color: #272727 !important;
}

.badge-primary-inverted {
    color: #007bff;
    border: #007bff 1px solid;
}

.no-box-shadow:focus {
    box-shadow: none !important;
}

.max-vh-50 {
    max-height: 50vh!important;
}

.max-vh-75 {
    max-height: 75vh!important;
}

.hide-scrollbar::-webkit-scrollbar {
    display: none;
}

.hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
}

@keyframes spinner-grow {
    0% {
        transform: scale(0.85);
    }

    50% {
        opacity: 1;
        transform: none;
    }

    100% {
        opacity: 0.75;
        transform: scale(0.85);
    }
}

.spinner-grow {
    opacity: 0.75;
    animation: spinner-grow 2s linear infinite;
}

.fake-caret {
    position: relative;
}

.fake-caret::after {
    content: "|";
    display: inline-block;
    position: absolute;
    top: -4px;
    left: -2px;
}

.rounded {
    border-radius: 0.5rem !important;
}

.dropdown-menu-start {
    max-width: 100%;
}

.dropdown-menu-center {
    right: auto;
    left: 50%;
    -webkit-transform: translate(-50%, 0);
    -o-transform: translate(-50%, 0);
    transform: translate(-50%, 0);
}

.d-block {
    display: block;
}

.navbar-expand {
    flex-flow: wrap;
}

.nav-link {
    display: flex;;
    align-items: center;
}

hr {
    border: 1px solid #dee2e6 !important;
    height: 0 !important;
    overflow: visible;
    opacity: 1 !important;
}

.alert hr {
    border: 1px solid currentColor !important;
}

.gutter-margin {
    width: calc(100% - 1.5rem) !important;
    margin-left: 0.75rem;
}

.bg-veryCommon {
    background-color: $cyan;
}

.bg-common {
    background-color: $teal;
}

.bg-uncommon {
    background-color: $yellow;
}

.bg-rare {
    background-color: $orange;
}

.bg-veryRare {
    background-color: $red;
}

.bg-unknown {
    background-color: $gray-500;
}

.bg-heiban {
    background-color: $cyan;
}

.bg-odaka {
    background-color: $teal;
}

.bg-nakadaka {
    background-color: $orange;
}

.bg-kihuku {
    background-color: $purple;
}

.bg-atamadaka {
    background-color: $red;
}

.page visual, #card visual {
    display: none;
}

.page visual {
    padding-left: 6px;
    padding-right: 6px;
}

.page cue {
    @extend .pe-1;
    @extend .text-muted;
    display: inline;
    cursor: pointer;

    &.active {
        @extend .text-primary;
    }
}

component {
    @extend .user-select-all;
    display: inline;
}

phrase {
    display: inline;

    &.active {
        background-color: $gray-200;
    }
}

space {
    padding-left: 6px;
    padding-right: 6px;
}

.word-status-enabled {
    .status-unknown {
        @extend .text-danger;
    }

    .status-learning {
        @extend .text-warning;
    }
}

.visual-type-showPitchAccentDrops {
    visual {
        display: inline !important;
    }

    component {
        display: none;
    }

    .page {
        line-height: 1.75rem;
    }
}

marking.drop {
    border-top: solid $red 1px;
    background: url('./../../../Public/images/drop.png') no-repeat right 0;
    text-indent: 0;
    padding-top: 0px;
    display: inline-block;
}

marking.overline {
    border-top: solid $red 1px;
    text-indent: 0;
    padding-top: 0px;
    display: inline-block;
}

silenced {
    display: inline-block;
    position: relative;
    margin: 0 1px;
    padding: 2px;
    border: dotted #222 1px;
    line-height: 1;
    border-radius: 50%;
    text-indent: 0;
    box-sizing: border-box;
}

silenced.wide {
    border-radius: 12px;
}

.visual-type-showFrequency {
    .underline {
        text-decoration: underline;
        text-decoration-color: transparent;
        text-decoration-thickness: 2px;
        text-underline-offset: 0.25rem;
    }

    .underline-veryCommon {
        text-decoration-color: $cyan;
    }

    .underline-common {
        text-decoration-color: $teal;
    }

    .underline-uncommon {
        text-decoration-color: $yellow;
    }

    .underline-rare {
        text-decoration-color: $orange;
    }

    .underline-veryRare {
        text-decoration-color: $red;
    }
    .underline-unknown {
        text-decoration-color: $gray-500;
    }
}

.visual-type-showPitchAccent {
    .underline {
        text-decoration: underline;
        text-decoration-color: transparent;
        text-decoration-thickness: 2px;
        text-underline-offset: 0.25rem;
    }

    .underline-pitch-heiban {
        text-decoration-color: $cyan;
    }

    .underline-pitch-odaka {
        text-decoration-color: $teal;
    }

    .underline-pitch-nakadaka {
        text-decoration-color: $orange;
    }

    .underline-pitch-kihuku {
        text-decoration-color: $purple;
    }

    .underline-pitch-atamadaka {
        text-decoration-color: $red;
    }

    .underline-pitch-unknown {
        // text-decoration-color: $gray-500;
    }
}

.ruby-type-none {
    rt {
        display: none;
    }
}

.ruby-type-unknown {
    .underline-veryRare {
        rt {
            display: none;
        }
    }
    .underline-rare {
        rt {
            display: none;
        }
    }
    .underline-uncommon {
        rt {
            display: none;
        }
    }
    .underline-common {
        rt {
            display: none;
        }
    }
    .underline-veryCommon {
        rt {
            display: none;
        }
    }
}

.ruby-type-veryRare {
    .underline-rare {
        rt {
            display: none;
        }
    }
    .underline-uncommon {
        rt {
            display: none;
        }
    }
    .underline-common {
        rt {
            display: none;
        }
    }
    .underline-veryCommon {
        rt {
            display: none;
        }
    }
}

.ruby-type-rare {
    .underline-uncommon {
        rt {
            display: none;
        }
    }
    .underline-common {
        rt {
            display: none;
        }
    }
    .underline-veryCommon {
        rt {
            display: none;
        }
    }
}

.ruby-type-uncommon {
    .underline-common {
        rt {
            display: none;
        }
    }
    .underline-veryCommon {
        rt {
            display: none;
        }
    }
}

.ruby-type-common {
    .underline-veryCommon {
        rt {
            display: none;
        }
    }
}

#card component {
    line-height: 2.5rem;
    font-size: 1.25rem;
}

.page {
    line-height: 2.5rem;
    font-size: 1.25rem;

    p {
        margin-bottom: 1rem;
    }
}

.page component {
    background-color: transparent;
    cursor: pointer;
    border-radius: 4px;
    padding-bottom: 6px;
    padding-left: 1px;
    padding-right: 1px;
}
.page component:hover {
    background-color: rgba(127,127,127,.17);
}

.page.dark component:hover {
    background-color: rgba(0,0,0,0.17);
}

.visual-type-none {
    component {
        padding-bottom: 0px;
    }
}

.page img {
    max-width: 100%;
    width: auto;
    height: auto;
}

rt .underline {
    text-decoration: none !important;
    padding: 0;
}

.dropdown-menu-end .dropdown-menu {
    --bs-position: end;
    right: 0 !important;
    left: auto;
}

.prefers-color-contrast {

    .list-group-item-danger {
        background-color: #F49DA1;
    }

}

@mixin darkMode {
    background-color: #000;

    * {
        scrollbar-color: light;
    }

    .container {
        background-color: $gray-900 !important;
        color: #fff !important;
    }

    .modal-content {
        background-color: #343a40;
        color: white;
    }

    .bg-dark {
        background-color: #111 !important;
    }

    .table {
        color: #fff;
    }

    .table-striped > tbody > tr:nth-of-type(odd) {
        color: #fff;
    }

    .table-hover > tbody > tr:hover {
        color: #fff;
    }

    .cloze-deletion {
        color: #000;
    }

    // .list-group-item {
    //     color: $dropdown-dark-color;
    // }

    .list-group-item-action {
        background-color: $dropdown-dark-bg;
        border-color: $dropdown-dark-divider-bg;
        color: $dropdown-dark-link-color;
        outline: none !important;

        &:hover, &:focus {
            color: $dropdown-dark-link-hover-color;
            background-color: tint-color($dropdown-dark-bg, 10%);
        }

        &.active, &:active {
            color: $dropdown-dark-link-active-color;
            @include gradient-bg($dropdown-dark-link-active-bg);
        }

        &.disabled, &:disabled {
            color: $dropdown-dark-link-disabled-color;
        }
    }

    .dropdown-menu {
        color: $dropdown-dark-color;
        background-color: $dropdown-dark-bg;
        border-color: $dropdown-dark-border-color;
        @include box-shadow($dropdown-dark-box-shadow);

        .dropdown-item {
          color: $dropdown-dark-link-color;

            &:hover, &:focus {
              color: $dropdown-dark-link-hover-color;
              @include gradient-bg($dropdown-dark-link-hover-bg);
            }

            &.active, &:active {
              color: $dropdown-dark-link-active-color;
              @include gradient-bg($dropdown-dark-link-active-bg);
            }

            &.disabled, &:disabled {
              color: $dropdown-dark-link-disabled-color;
            }
        }

        .dropdown-divider {
          border-color: $dropdown-dark-divider-bg;
        }

        .dropdown-item-text {
          color: $dropdown-dark-link-color;
        }

        .dropdown-header {
          color: $dropdown-dark-header-color;
        }
    }

    silenced {
        border-color: white;
    }

    phrase {
        &.active {
            background-color: $gray-800;
        }
    }

}

.prefers-dark-mode {
    @include darkMode;
}

@media (prefers-color-scheme: dark) {
    body {
        @include darkMode;
    }
}

.read-more {
    max-height: 150px;
    position: relative;
    overflow-y: hidden;
}

.read-more:before {
    content: '';
    pointer-events: none;
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    background: linear-gradient(transparent 100px, rgba(127, 127, 127, 0.1));
}

.pagination {
    justify-content: center !important;
}

.text-break {
    white-space: pre-wrap;
}

.showAutolinks {
    h1, h2, h3, h4 {
        &:hover .autolink span {
            visibility: visible;
        }

        .autolink {
            display: inline;
            float: left;
            margin-left: -20px;

            span {
                visibility: hidden;
            }
        }
    }
}

.autolink {
    display: none;
}

.spoiler {
    @extend .user-select-none;
    display: inline-block;
    background: #333333;
    border-radius: 0.2em;
    color: transparent;
    cursor: pointer;
    transition: color 0.25s, background-color 0.25s;
    margin-bottom: 1px;
    margin-top: 1px;
}

.spoiler > * {
    opacity: 0;
    transition: opacity 0.25s;
}

.spoiler.active {
    @extend .user-select-auto;
    background: rgba(127, 127, 127, 0.1);
    color: inherit;

    & > * {
        opacity: 1;
    }
}

.cloze-deletion {
    padding: .2em;
    background-color: #fcf8e3;
}

blockquote {
    @extend .text-muted;
    @extend .m-0;
    @extend .border-start;
    @extend .border-4;
    @extend .border-secondary;
    @extend .ps-2;
}

.cursor-pointer {
    cursor: pointer !important;
}

.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu) input, .input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3) input {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) button {
    margin-left: -1px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.bi-chevron-compact-auto::before {
    content: "\f27c";
}

.bi-chevron-compact-auto.collapsed::before {
    content: "\f279";
}

#dropdownNav .nav-link, #dropdownNav .nav-item {
    @extend .justify-content-center;
    @extend .col-6;
}

#dropdownNav .nav-item {
    @extend .d-flex;
}

.navbar-dark button.btn-dark {
    color: rgba(255, 255, 255, 0.55);
}

.navbar-dark button.btn-dark:hover, .navbar-dark button.btn-dark:focus {
    color: rgba(255, 255, 255, 0.75);
}

.navbar-dark .btn-dark, .navbar-dark .btn-dark:hover, .navbar-dark .btn-dark:focus, .navbar-dark .btn-dark:active {
    color: auto;
    background-color: transparent !important;
    border: 0 !important;
    box-shadow: none;
    outline: none;
}

.form-control.recording, .form-control.recording:focus {
    border-color: tint-color($danger, 50%);
    box-shadow: 0 0 $input-btn-focus-blur $input-btn-focus-width rgba($danger, $input-btn-focus-color-opacity);
}

.form-control.readonly {
    background-color: $input-disabled-bg;
    border-color: $input-disabled-border-color;
}

.carousel-caption-position-relative {
    .carousel-caption {
        position: static !important;
    }
}

.tagify {
    color: $input-color !important;
    background-color: $input-bg !important;
    background-clip: padding-box !important;
    border: $input-border-width solid $input-border-color !important;
    appearance: none; // Fix appearance for date inputs in Safari

    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
    @include border-radius($input-border-radius, 0 !important);
    @include box-shadow($input-box-shadow !important);
    @include transition($input-transition !important);
}

.tagify--focus {
    color: $input-focus-color !important;
    background-color: $input-focus-bg !important;
    border-color: $input-focus-border-color !important;
    outline: 0;
    @if $enable-shadows {
      @include box-shadow($input-box-shadow, $input-focus-box-shadow !important);
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: $input-focus-box-shadow !important;
    }
}

.offcanvas-backdrop {
    display: none;
}

#app {
    transition: margin 250ms;
}

.offcanvas-open #app {
    margin-left: 400px;
}
